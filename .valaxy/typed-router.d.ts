/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...path]': RouteRecordInfo<'/[...path]', '/:path(.*)', { path: ParamValue<true> }, { path: ParamValue<false> }>,
    '/404': RouteRecordInfo<'/404', '/404', Record<never, never>, Record<never, never>>,
    '/about/': RouteRecordInfo<'/about/', '/about', Record<never, never>, Record<never, never>>,
    '/about/site': RouteRecordInfo<'/about/site', '/about/site', Record<never, never>, Record<never, never>>,
    '/albums/': RouteRecordInfo<'/albums/', '/albums', Record<never, never>, Record<never, never>>,
    '/albums/daily': RouteRecordInfo<'/albums/daily', '/albums/daily', Record<never, never>, Record<never, never>>,
    '/albums/miracle': RouteRecordInfo<'/albums/miracle', '/albums/miracle', Record<never, never>, Record<never, never>>,
    '/albums/sunset': RouteRecordInfo<'/albums/sunset', '/albums/sunset', Record<never, never>, Record<never, never>>,
    '/albums/young': RouteRecordInfo<'/albums/young', '/albums/young', Record<never, never>, Record<never, never>>,
    '/archives/': RouteRecordInfo<'/archives/', '/archives', Record<never, never>, Record<never, never>>,
    '/building/': RouteRecordInfo<'/building/', '/building', Record<never, never>, Record<never, never>>,
    '/categories/': RouteRecordInfo<'/categories/', '/categories', Record<never, never>, Record<never, never>>,
    '/collections/': RouteRecordInfo<'/collections/', '/collections', Record<never, never>, Record<never, never>>,
    '/links/': RouteRecordInfo<'/links/', '/links', Record<never, never>, Record<never, never>>,
    '/page/[page]': RouteRecordInfo<'/page/[page]', '/page/:page', { page: ParamValue<true> }, { page: ParamValue<false> }>,
    '/posts/': RouteRecordInfo<'/posts/', '/posts', Record<never, never>, Record<never, never>>,
    '/posts/blog0827': RouteRecordInfo<'/posts/blog0827', '/posts/blog0827', Record<never, never>, Record<never, never>>,
    '/posts/blog0827-2': RouteRecordInfo<'/posts/blog0827-2', '/posts/blog0827-2', Record<never, never>, Record<never, never>>,
    '/posts/hello-valaxy': RouteRecordInfo<'/posts/hello-valaxy', '/posts/hello-valaxy', Record<never, never>, Record<never, never>>,
    '/posts/markdown': RouteRecordInfo<'/posts/markdown', '/posts/markdown', Record<never, never>, Record<never, never>>,
    '/posts/new': RouteRecordInfo<'/posts/new', '/posts/new', Record<never, never>, Record<never, never>>,
    '/posts/RV-Hausdorff': RouteRecordInfo<'/posts/RV-Hausdorff', '/posts/RV-Hausdorff', Record<never, never>, Record<never, never>>,
    '/tags/': RouteRecordInfo<'/tags/', '/tags', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'node_modules/.pnpm/valaxy-theme-yun@0.26.3_vue@3.5.20_typescript@5.9.2_/node_modules/valaxy-theme-yun/pages/index.vue': {
      routes: '/'
      views: never
    }
    'node_modules/.pnpm/valaxy@0.26.3_@babel+parser_2fe5321f6fe3dd6b2dd734ca10cd5db0/node_modules/valaxy/client/pages/[...path].vue': {
      routes: '/[...path]'
      views: never
    }
    'pages/404.md': {
      routes: '/404'
      views: never
    }
    'pages/about/index.md': {
      routes: '/about/'
      views: never
    }
    'pages/about/site.md': {
      routes: '/about/site'
      views: never
    }
    'pages/albums/index.md': {
      routes: '/albums/'
      views: never
    }
    'pages/albums/daily.md': {
      routes: '/albums/daily'
      views: never
    }
    'pages/albums/miracle.md': {
      routes: '/albums/miracle'
      views: never
    }
    'pages/albums/sunset.md': {
      routes: '/albums/sunset'
      views: never
    }
    'pages/albums/young.md': {
      routes: '/albums/young'
      views: never
    }
    'pages/archives/index.md': {
      routes: '/archives/'
      views: never
    }
    'pages/building/index.md': {
      routes: '/building/'
      views: never
    }
    'pages/categories/index.md': {
      routes: '/categories/'
      views: never
    }
    'pages/collections/index.md': {
      routes: '/collections/'
      views: never
    }
    'pages/links/index.md': {
      routes: '/links/'
      views: never
    }
    'node_modules/.pnpm/valaxy-theme-yun@0.26.3_vue@3.5.20_typescript@5.9.2_/node_modules/valaxy-theme-yun/pages/page/[page].vue': {
      routes: '/page/[page]'
      views: never
    }
    'node_modules/.pnpm/valaxy-theme-yun@0.26.3_vue@3.5.20_typescript@5.9.2_/node_modules/valaxy-theme-yun/pages/posts/index.vue': {
      routes: '/posts/'
      views: never
    }
    'pages/posts/blog0827.md': {
      routes: '/posts/blog0827'
      views: never
    }
    'pages/posts/blog0827-2.md': {
      routes: '/posts/blog0827-2'
      views: never
    }
    'pages/posts/hello-valaxy.md': {
      routes: '/posts/hello-valaxy'
      views: never
    }
    'pages/posts/markdown.md': {
      routes: '/posts/markdown'
      views: never
    }
    'pages/posts/new.md': {
      routes: '/posts/new'
      views: never
    }
    'pages/posts/RV-Hausdorff.md': {
      routes: '/posts/RV-Hausdorff'
      views: never
    }
    'pages/tags/index.md': {
      routes: '/tags/'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
